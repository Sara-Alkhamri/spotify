{"ast":null,"code":"var _jsxFileName = \"/Users/saraalkhamri/spotify/client/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player(_ref) {\n  _s();\n\n  let {\n    accessToken,\n    trackUri\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: play,\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/saraalkhamri/spotify/client/src/Player.js"],"names":["useState","useEffect","SpotifyPlayer","Player","accessToken","trackUri","play","setPlay","state","isPlaying"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,MAAT,OAA2C;AAAA;;AAAA,MAA3B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAA2B;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMM,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AAEA,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAEA,WADX;AAEI,IAAA,YAAY,MAFhB;AAGI,IAAA,QAAQ,EAAEI,KAAK,IAAI;AACf,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBF,OAAO,CAAC,KAAD,CAAP;AACzB,KALL;AAMI,IAAA,IAAI,EAAED,IANV;AAOI,IAAA,IAAI,EAAED,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AAPlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAjBuBF,M;;KAAAA,M","sourcesContent":["\nimport { useState, useEffect } from \"react\"\nimport SpotifyPlayer from \"react-spotify-web-playback\"\n\nexport default function Player({ accessToken, trackUri }) {\n    const [play, setPlay] = useState(false)\n\n    useEffect(() => setPlay(true), [trackUri])\n\n    if (!accessToken) return null\n    return (\n        <SpotifyPlayer\n            token={accessToken}\n            showSaveIcon\n            callback={state => {\n                if (!state.isPlaying) setPlay(false)\n            }}\n            play={play}\n            uris={trackUri ? [trackUri] : []}\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}