{"ast":null,"code":"var _jsxFileName = \"/Users/saraalkhamri/spotify/client/src/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport Player from \"./Player\";\nimport TrackSearchResults from \"./TrackSearchResults\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [lyrics, setLyrics] = useState(\"\");\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"40e8b276f23c4303abf74945b97b12f1\"\n});\nexport default function Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState(\"\");\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  }\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.title,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResults, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"IxihNKw3vFcHJ/Qp55vUUfLk8Ic=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/saraalkhamri/spotify/client/src/Dashboard.js"],"names":["useState","useEffect","useAuth","Player","TrackSearchResults","Container","Form","SpotifyWebApi","lyrics","setLyrics","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","chooseTrack","track","axios","get","params","title","artist","then","res","data","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"\nimport useAuth from \"./useAuth\"\nimport Player from \"./Player\"\nimport TrackSearchResults from \"./TrackSearchResults\"\nimport { Container, Form } from \"react-bootstrap\"\nimport SpotifyWebApi from \"spotify-web-api-node\"\nconst [lyrics, setLyrics] = useState(\"\")\n\n\nconst spotifyApi = new SpotifyWebApi({\n    clientId: \"40e8b276f23c4303abf74945b97b12f1\",\n})\n\nexport default function Dashboard({ code }) {\n\n    const accessToken = useAuth(code)\n    const [search, setSearch] = useState('')\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState()\n    const [lyrics, setLyrics] = useState(\"\")\n\n    function chooseTrack(track) {\n        setPlayingTrack(track)\n        setSearch(\"\")\n\n    }\n\n    useEffect(() => {\n        if (!playingTrack) return\n\n        axios\n            .get(\"http://localhost:3001/lyrics\", {\n                params: {\n                    track: playingTrack.title,\n                    artist: playingTrack.artist,\n                },\n            })\n            .then(res => {\n                setLyrics(res.data.lyrics)\n            })\n    }, [playingTrack])\n\n    useEffect(() => {\n        if (!accessToken) return\n        spotifyApi.setAccessToken(accessToken)\n    }, [accessToken])\n\n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        if (!accessToken) return\n\n        let cancel = false\n        spotifyApi.searchTracks(search).then(res => {\n            if (cancel) return\n            setSearchResults(\n                res.body.tracks.items.map(track => {\n                    const smallestAlbumImage = track.album.images.reduce(\n                        (smallest, image) => {\n                            if (image.height < smallest.height) return image\n                            return smallest\n                        },\n                        track.album.images[0]\n                    )\n\n                    return {\n                        artist: track.artists[0].name,\n                        title: track.name,\n                        uri: track.uri,\n                        albumUrl: smallestAlbumImage.url,\n                    }\n                })\n            )\n        })\n\n        return () => (cancel = true)\n    }, [search, accessToken])\n\n    return (\n        <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n            <Form.Control\n                type=\"search\"\n                placeholder=\"Search Songs/Artists\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n            />\n            <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n                {searchResults.map(track => (\n                    <TrackSearchResults\n                        track={track}\n                        key={track.uri}\n                        chooseTrack={chooseTrack}\n                    />\n                ))}\n\n            </div>\n            <div>\n                <Player accessToken={accessToken} trackUri={playingTrack ?.uri} />\n            </div>\n        </Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}