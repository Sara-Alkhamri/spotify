{"ast":null,"code":"var _jsxFileName = \"/Users/saraalkhamri/spotify/client/src/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useAuth from './useAuth';\nimport { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResults from './TrackSearchResults';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"40e8b276f23c4303abf74945b97b12f1\"\n});\nexport default function Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResults, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"AxBtwiYU9dgiIo7VM84fCw5DoCc=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/saraalkhamri/spotify/client/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResults","Player","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","chooseTrack","track","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import React from 'react'\nimport useAuth from './useAuth'\nimport { useState, useEffect } from 'react'\nimport { Container, Form } from 'react-bootstrap'\nimport SpotifyWebApi from \"spotify-web-api-node\"\nimport TrackSearchResults from './TrackSearchResults'\nimport Player from './Player'\n\n\n\nconst spotifyApi = new SpotifyWebApi({\n    clientId: \"40e8b276f23c4303abf74945b97b12f1\",\n})\n\nexport default function Dashboard({ code }) {\n\n    const accessToken = useAuth(code)\n    const [search, setSearch] = useState('')\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState()\n\n    function chooseTrack(track) {\n        setPlayingTrack(track)\n        setSearch(\"\")\n    }\n\n    useEffect(() => {\n        if (!accessToken) return\n        spotifyApi.setAccessToken(accessToken)\n    }, [accessToken])\n\n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        if (!accessToken) return\n\n        let cancel = false\n        spotifyApi.searchTracks(search).then(res => {\n            if (cancel) return\n            setSearchResults(\n                res.body.tracks.items.map(track => {\n                    const smallestAlbumImage = track.album.images.reduce(\n                        (smallest, image) => {\n                            if (image.height < smallest.height) return image\n                            return smallest\n                        },\n                        track.album.images[0]\n                    )\n\n                    return {\n                        artist: track.artists[0].name,\n                        title: track.name,\n                        uri: track.uri,\n                        albumUrl: smallestAlbumImage.url,\n                    }\n                })\n            )\n        })\n\n        return () => (cancel = true)\n    }, [search, accessToken])\n    return (\n        <Container className=\"d-flex flex-column py-2\" style={{ height: '100vh' }}>\n\n            <Form.Control type='search'\n                placeholder='Search Songs/Artists'\n                value={search}\n                onChange={e => setSearch(e.target.value)} />\n\n            <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n                {searchResults.map(track => (\n                    <TrackSearchResults\n                        track={track} key={track.uri} chooseTrack={chooseTrack}\n                    />\n                ))}\n            </div>\n\n            <div>\n                <Player accessToken={accessToken} trackUri={playingTrack.uri} />\n            </div>\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}